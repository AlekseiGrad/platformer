using System;using Systems;using Commands;using Components;using System.Reflection;namespace HECSFramework.Core{	public sealed class CharacterCameraFollowingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class CharacterDamageSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CharacterDamageSystem)system;			LocalCommandListener<InputCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CharacterDamageSystem)system;			LocalCommandListener<InputCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class CharacterDeathSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class CharacterMovementSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CharacterMovementSystem)system;			LocalCommandListener<InputCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CharacterMovementSystem)system;			LocalCommandListener<InputCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class CharacterMovingAnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CharacterMovingAnimationSystem)system;			LocalCommandListener<InputCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CharacterMovingAnimationSystem)system;			LocalCommandListener<InputCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class DeathSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DeathSystem)system;			LocalCommandListener<IsDeadCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DeathSystem)system;			LocalCommandListener<IsDeadCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class EnemyMovementAnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class EnemyMovementSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class PlatformCatchSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (PlatformCatchSystem)system;			LocalCommandListener<CatchCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (PlatformCatchSystem)system;			LocalCommandListener<CatchCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class PlatformMovingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SpawnDefaultCharacterSystemBindContainerForSys : ISystemSetter	{		private FieldInfo characterHolderComponentFieldBinding = typeof(SpawnDefaultCharacterSystem).GetField("characterHolderComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnDefaultCharacterSystem)system;			characterHolderComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<DefaultCharacterHolderComponent>());		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnDefaultCharacterSystem)system;			characterHolderComponentFieldBinding.SetValue(system, null);		}	}	public sealed class TestTestSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class AbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityByIDCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddLocalReactComponent<ViewReadyTagComponent>(system.Owner.Index, currentSystem, true);			currentSystem.abilitiesHolderComponent = currentSystem.Owner.GetOrAddComponent<AbilitiesHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityByIDCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.AddLocalReactComponent<ViewReadyTagComponent>(system.Owner.Index, currentSystem, false);			currentSystem.abilitiesHolderComponent = null;		}	}	public sealed class AwaitersUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class DestroyEntityWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<DestroyEntityWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (DestroyEntityWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<DestroyEntityWorldCommand>(currentSystem);		}	}	public sealed class PoolingSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class RemoveComponentWorldSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.AddGlobalReactCommand<RemoveHecsComponentWorldCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<AddHecsComponentWorldCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (RemoveComponentWorldSystem)system;			system.Owner.World.RemoveGlobalReactCommand<RemoveHecsComponentWorldCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<AddHecsComponentWorldCommand>(currentSystem);		}	}	public sealed class WaitingCommandsSystemsBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.AddGlobalReactCommand<WaitAndEntityCallbackCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<WaitAndCallbackCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (WaitingCommandsSystems)system;			system.Owner.World.RemoveGlobalReactCommand<WaitAndEntityCallbackCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<WaitAndCallbackCommand>(currentSystem);		}	}	public sealed class AINPCSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			LocalCommandListener<NeedDecisionCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<IsDeadCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<SetDefaultStrategyCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ChangeStrategyCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ForceStopAICommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ForceStartAICommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.aIStrategyComponent = currentSystem.Owner.GetOrAddComponent<AIStrategyComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AINPCSystem)system;			LocalCommandListener<NeedDecisionCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<IsDeadCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<SetDefaultStrategyCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ChangeStrategyCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ForceStopAICommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ForceStartAICommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.aIStrategyComponent = null;		}	}	public sealed class ActorAfterViewSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class InputListenSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class SpawnViewSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			currentSystem.viewReferenceGameObject = currentSystem.Owner.GetOrAddComponent<ViewReferenceGameObjectComponent>();			currentSystem.unityTransform = currentSystem.Owner.GetOrAddComponent<UnityTransformComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SpawnViewSystem)system;			currentSystem.viewReferenceGameObject = null;			currentSystem.unityTransform = null;		}	}	public sealed class StartSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class UpdateActorByTranformSystemBindContainerForSys : ISystemSetter	{		private FieldInfo transformComponentFieldBinding = typeof(UpdateActorByTranformSystem).GetField("transformComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<TransformComponent>());		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateActorByTranformSystem)system;			transformComponentFieldBinding.SetValue(system, null);		}	}	public sealed class UpdateTranformFromActorSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = currentSystem.Owner.GetOrAddComponent<TransformComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UpdateTranformFromActorSystem)system;			currentSystem.transformComponent = null;		}	}	public sealed class SoundGlobalSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.AddGlobalReactCommand<PlaySoundCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<StopSoundCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<UpdateSoundOptionsCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (SoundGlobalSystem)system;			system.Owner.World.RemoveGlobalReactCommand<PlaySoundCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StopSoundCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<UpdateSoundOptionsCommand>(currentSystem);		}	}	public sealed class StressTestReactsSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (StressTestReactsSystem)system;			LocalCommandListener<StressTestLocalCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddGlobalReactCommand<StressTestGlobalCommand>(system, currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, true);			system.Owner.World.AddGlobalGenericReactComponent<ICounter>(currentSystem, true);			system.Owner.World.AddGlobalReactComponent<TestReactComponent>(currentSystem, true);			system.Owner.World.AddLocalReactComponent<TestReactComponent>(system.Owner.Index, currentSystem, true);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (StressTestReactsSystem)system;			LocalCommandListener<StressTestLocalCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.RemoveGlobalReactCommand<StressTestGlobalCommand>(currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, false);			system.Owner.World.AddGlobalGenericReactComponent<ICounter>(currentSystem, false);			system.Owner.World.AddGlobalReactComponent<TestReactComponent>(currentSystem, false);			system.Owner.World.AddLocalReactComponent<TestReactComponent>(system.Owner.Index, currentSystem, false);		}	}	public sealed class AdditionalCanvasesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AdditionalCanvasesSystem)system;			currentSystem.MainCanvasTagComponent = currentSystem.Owner.GetOrAddComponent<MainCanvasTagComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AdditionalCanvasesSystem)system;			currentSystem.MainCanvasTagComponent = null;		}	}	public sealed class HideUISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			LocalCommandListener<HideUICommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (HideUISystem)system;			LocalCommandListener<HideUICommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class UISystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.AddGlobalReactCommand<ShowUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<ShowUIOnAdditionalCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<HideUICommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<ShowUIAndHideOthersCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<HideAllUIExceptCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<UIGroupCommand>(system, currentSystem);			system.Owner.World.AddGlobalReactCommand<CanvasReadyCommand>(system, currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (UISystem)system;			system.Owner.World.RemoveGlobalReactCommand<ShowUICommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<ShowUIOnAdditionalCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<HideUICommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<ShowUIAndHideOthersCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<HideAllUIExceptCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<UIGroupCommand>(currentSystem);			system.Owner.World.RemoveGlobalReactCommand<CanvasReadyCommand>(currentSystem);		}	}	public sealed class CountersHolderSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			LocalCommandListener<AddCounterModifierCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AddCounterModifierCommand<int>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AddCounterModifierBySubIDCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<float>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<int>>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<ResetCountersCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, true);			currentSystem.countersHolder = currentSystem.Owner.GetOrAddComponent<CountersHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CountersHolderSystem)system;			LocalCommandListener<AddCounterModifierCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AddCounterModifierCommand<int>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AddCounterModifierBySubIDCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<float>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<RemoveCounterModifierCommand<int>>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<ResetCountersCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			system.Owner.World.AddLocalGenericReactComponent<ICounter>(system.Owner.Index, currentSystem, false);			currentSystem.countersHolder = null;		}	}	public sealed class StateUpdateSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class StrategiesMainServiceSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class AnimationDoneCheckOutSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			LocalCommandListener<AnimationEventCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AnimationDoneCheckOut>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<AnimationCycleCheckout>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.animationCheckOutsHolder = currentSystem.Owner.GetOrAddComponent<AnimationCheckOutsHolderComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationDoneCheckOutSystem)system;			LocalCommandListener<AnimationEventCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AnimationDoneCheckOut>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<AnimationCycleCheckout>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.animationCheckOutsHolder = null;		}	}	public sealed class StickFollowSystemBindContainerForSys : ISystemSetter	{		private FieldInfo radiusComponentFieldBinding = typeof(StickFollowSystem).GetField("radiusComponent", BindingFlags.Instance | BindingFlags.NonPublic);		public void BindSystem(ISystem system)		{			var currentSystem = (StickFollowSystem)system;			radiusComponentFieldBinding.SetValue(currentSystem, currentSystem.Owner.GetOrAddComponent<RadiusComponent>());		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (StickFollowSystem)system;			radiusComponentFieldBinding.SetValue(system, null);		}	}	public sealed class StickInputSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class TouchScreenSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{		}		public void UnBindSystem(ISystem system)		{		}	}	public sealed class CompositeAbilitiesSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (CompositeAbilitiesSystem)system;			LocalCommandListener<ExecuteAbilityCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);		}	}	public sealed class AnimationSystemBindContainerForSys : ISystemSetter	{		public void BindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			LocalCommandListener<BoolAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<FloatAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<IntAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			LocalCommandListener<TriggerAnimationCommand>.AddListener(currentSystem.Owner.World.Index,currentSystem);			currentSystem.AnimatorStateComponent = currentSystem.Owner.GetOrAddComponent<AnimatorStateComponent>();		}		public void UnBindSystem(ISystem system)		{			var currentSystem = (AnimationSystem)system;			LocalCommandListener<BoolAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<FloatAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<IntAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			LocalCommandListener<TriggerAnimationCommand>.RemoveListener(currentSystem.Owner.WorldId, currentSystem);			currentSystem.AnimatorStateComponent = null;		}	}	public static partial class TypesMap	{		static partial void SetSystemSetters()		{			systemsSetters = new System.Collections.Generic.Dictionary<Type, ISystemSetter>()			{				{typeof(CharacterCameraFollowingSystem), new CharacterCameraFollowingSystemBindContainerForSys()},				{typeof(CharacterDamageSystem), new CharacterDamageSystemBindContainerForSys()},				{typeof(CharacterDeathSystem), new CharacterDeathSystemBindContainerForSys()},				{typeof(CharacterMovementSystem), new CharacterMovementSystemBindContainerForSys()},				{typeof(CharacterMovingAnimationSystem), new CharacterMovingAnimationSystemBindContainerForSys()},				{typeof(DeathSystem), new DeathSystemBindContainerForSys()},				{typeof(EnemyMovementAnimationSystem), new EnemyMovementAnimationSystemBindContainerForSys()},				{typeof(EnemyMovementSystem), new EnemyMovementSystemBindContainerForSys()},				{typeof(PlatformCatchSystem), new PlatformCatchSystemBindContainerForSys()},				{typeof(PlatformMovingSystem), new PlatformMovingSystemBindContainerForSys()},				{typeof(SpawnDefaultCharacterSystem), new SpawnDefaultCharacterSystemBindContainerForSys()},				{typeof(TestTestSystem), new TestTestSystemBindContainerForSys()},				{typeof(AbilitiesSystem), new AbilitiesSystemBindContainerForSys()},				{typeof(AwaitersUpdateSystem), new AwaitersUpdateSystemBindContainerForSys()},				{typeof(DestroyEntityWorldSystem), new DestroyEntityWorldSystemBindContainerForSys()},				{typeof(PoolingSystem), new PoolingSystemBindContainerForSys()},				{typeof(RemoveComponentWorldSystem), new RemoveComponentWorldSystemBindContainerForSys()},				{typeof(WaitingCommandsSystems), new WaitingCommandsSystemsBindContainerForSys()},				{typeof(AINPCSystem), new AINPCSystemBindContainerForSys()},				{typeof(ActorAfterViewSystem), new ActorAfterViewSystemBindContainerForSys()},				{typeof(InputListenSystem), new InputListenSystemBindContainerForSys()},				{typeof(SpawnViewSystem), new SpawnViewSystemBindContainerForSys()},				{typeof(StartSystem), new StartSystemBindContainerForSys()},				{typeof(UpdateActorByTranformSystem), new UpdateActorByTranformSystemBindContainerForSys()},				{typeof(UpdateTranformFromActorSystem), new UpdateTranformFromActorSystemBindContainerForSys()},				{typeof(SoundGlobalSystem), new SoundGlobalSystemBindContainerForSys()},				{typeof(StressTestReactsSystem), new StressTestReactsSystemBindContainerForSys()},				{typeof(AdditionalCanvasesSystem), new AdditionalCanvasesSystemBindContainerForSys()},				{typeof(HideUISystem), new HideUISystemBindContainerForSys()},				{typeof(UISystem), new UISystemBindContainerForSys()},				{typeof(CountersHolderSystem), new CountersHolderSystemBindContainerForSys()},				{typeof(StateUpdateSystem), new StateUpdateSystemBindContainerForSys()},				{typeof(StrategiesMainServiceSystem), new StrategiesMainServiceSystemBindContainerForSys()},				{typeof(AnimationDoneCheckOutSystem), new AnimationDoneCheckOutSystemBindContainerForSys()},				{typeof(StickFollowSystem), new StickFollowSystemBindContainerForSys()},				{typeof(StickInputSystem), new StickInputSystemBindContainerForSys()},				{typeof(TouchScreenSystem), new TouchScreenSystemBindContainerForSys()},				{typeof(CompositeAbilitiesSystem), new CompositeAbilitiesSystemBindContainerForSys()},				{typeof(AnimationSystem), new AnimationSystemBindContainerForSys()},			};		}	}}